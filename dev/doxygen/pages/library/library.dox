/**

    @page doc_lib Library Documentation

    @tableofcontents

    This is the documentation of an LibrePCB library and all their specifications.
    
    Die Bauteilebibliothek ist ein extrem wichtiger Bestandteil von LibrePCB.
    Es wird sehr viel Wert auf eine gut strukturierte Bibliothek gelegt.
    Daher hier eine ausführliche Beschreibung zum Prinzip.
    
    @warning    Viele hier beschriebenen Ideen sind vorläufig einfach hier in der Doku festgehalten, damit sie nicht vergessen gehen. Ob und wie sie jemals umgesetzt werden, ist noch nicht klar.   
    
    
    @section doc_lib_general General Information
    
        - UUID: https://de.wikipedia.org/wiki/Universally_Unique_Identifier
        - The whole library is stored in the "lib" directory in the LibrePCB workspace.
        - There is always a local repository in the directory "lib/local/".
        - In directories like "lib/{UUID}/" are the libraries which are downloaded and will be updated automatically over the internet.
        - Each library element (symbol, footprint, ...) ist stored in a separate directory. These directories can contain files and subdirectories.
        - Each library element (symbol, footprint, ...) has a unique UUID. So a Symbol from repository A can be combined with a footprint from repository B, because their UUID will guarantee that only the right elements will be combined, and not the wrong ones.
        - For better performance of the library (searching in filesystem can be quite slow...), we use a SQLite database for caching. With a "read library"-function, the SQLite database will be filled with all important data of the library and their elements. This can take some time. Searching for elements will now be done with a SELECT statement in the database, which is very fast. To load a searched element, there's the filepath of the elment stored in the database. The elements themselves are not stored completely in the database! With a MD5 checksum compare, it's possible to make the next "read library"-action faster, because we can detect if a file has changed or not.


    @section doc_lib_file_structure File Structure
    
        The whole library is located in the workspace directory "lib". This folder contains the following subdirectories:
            - local:    All local library elements (created by the user or imported)
            - {UUID}:   For each repository a separate directory. These directories contain all library elements from the appropriate repository.
            
        All these directories contain the following subdirectories:
            - 3dmdl:    3D Models
            - cmp:      Components (library#Component)
            - cmpcat:   Component Categories (library#ComponentCategory)
            - fpt:      Footprints (library#Footprint)
            - gencmp:   Generic Components (library#GenericComponent)
            - pkg:      Packages (library#Package)
            - pkgcat:   Package Categories (library#PackageCategory)
            - sym:      Symbols (library#Symbol)
            
    
    @section doc_lib_sec1 Anbindung an Lagerverwaltungssysteme

        @warning Nur eine Idee...
        
        Für eine Anbindung der Bauteile in der Bibliothek an ein Lagerverwaltungssystem kommt eine separate
        Datenbank zum Einsatz, in der Bauteilebibliothek werden keinerlei Bestellnummern oder Preise abgelegt.
        Es ist geplant, dass für jedes Lagerverwaltungssystem ein eigenes Plugin angeboten wird. Jedes dieser
        Plugins benutzt dann seine eigene Bibliothek (SQLite3) um z.B. Lieferanten, Bestellnummern, Preise, 
        Lagerbestände usw. abzuspeichern.


    @section doc_lib_sec2 Repositories & Updates
    
        @warning Nur eine Idee...Der Einsatz von Repositories ist geplant, aber noch nicht festgelegt wie dies im Detail aussehen soll.

        Zum aktualisieren von Elementen (Symbole, Footprints, ...) werden Repositories verwendet. Es wird
        offizielle Repositories von LibrePCB geben, aber auch Drittanbieter können eigene Repositories 
        erstellen. Wird der eigenen Bibliothek ein Repository hinzugefügt, so werden alle darin enthaltenen
        Elemente heruntergeladen und von diesem Zeitpunkt an automatisch mit Updates versorgt. Wenn der
        Anbieter neue Elemente in sein Repository lädt, werden diese beim nächsten Update automatisch
        der eigenen Bibliothek hinzugefügt. Löscht man ein Repository, werden auch alle Dateien davon
        gelöscht. Existieren jedoch in der eigenen Bibliothek noch Links auf Elemente, die gelöscht
        werden sollen, werden die verlinkten Elemente zuerst der eigenen Bibliothek hinzugefügt.

        Jedes Repository muss alle Elemente, die von den darin enthaltenen Elementen gebraucht werden, selbst
        enthalten. Es darf keine Verknüpfungen zu Elementen geben, die nicht im Repository enthalten sind.
        Einzige Ausnahme stellen die offiziellen LibrePCB Repositories für Basiselemente dar. Diese
        dürfen vorausgesetzt werden, müssen aber auch dementsprechend deklariert sein, damit ein Deaktivieren
        eines Basis-Repositories verhindert wird wenn ein fremdes, aktives Repository dieses voraussetzt.

        Enthält ein Repository veraltete Elemente, die der Benutzer von einem anderen Repository in einer
        neueren Version zur Verfügung hat, wird automatisch die neuere Version verwendet. So kommt der
        Benutzer auch in den Genuss von aktuellen Elementen, auch wenn der Anbieter eines Repositories seine
        zur Verfügung gestellten Elemente nicht pflegt (aktualisiert).

        Von LibrePCB werden folgende Repositories offiziell zur Verfügung gestellt:
            - LibrePCB Base Symbols (nur Schaltplansymbole; R, C, L, LED, Zeichungsrahmen usw.)
            - LibrePCB Base Packages (Footprints und 3D-Modelle; R/C/L-Gehäuse, DIP, TQFP usw.)
            - LibrePCB Base Components (Nur Verknüpfungen zwischen Symbolen und Gehäusen; R, C, L, LED usw.)
            - LibrePCB Electronics (Mikrocontroller, Displays, Pegelwandler, Treiber, .......)
                - Mit Abhängigkeiten zu allen dreien "LibrePCB Base" Repositories
            - LibrePCB Automation (Für Stromlaufpläne [nur Symbole, keine Footprints]; SPS, Schütze, LS, FI usw.)
                - Mit Abhängigkeit zu "LibrePCB Base Symbols"

        Editiert der Benutzer ein Element aus einem Repository, so wird automatisch eine Kopie des Elementes
        angelegt, das keinen Link mehr zum Repository hat. Das originale Element bleibt unangetastet.
        Elemente ohne Link zu einem Repository werden den Elementen mit Link zu einem Repository immer vorgezogen.
        Damit wird sichergestellt, dass immer das Element verwendet wird, das vom Benutzer manuell bearbeitet wurde.

        Bei Updates werden die alten Elemente immer in der Datenbank liegengelassen. So können später auch mal
        ältere Versionen von Elementen erzwungen werden, falls es bei neueren Versionen zu Problemen kommt.


    @section doc_lib_sec3 Feedbacksystem
    
        @warning Nur eine Idee...

        Innerhalb eines Repositories wird es ein Feedbacksystem geben, um fehlerhafte Elemente melden
        zu können. So kann der Betreiber eines Repositories Fehler sehr schnell korrigieren.
        Gemeldete Fehler sollen auch für alle anderen Benutzer sichtbar sein, und im Bibliotheks-Browser
        sollen bei den entsprechenden Elementen kleine Warnhinweise erscheinen. Allerdings dürfen nur
        Meldungen angezeigt werden, die für die aktuell installierte Version des entsprechenden Elementes
        gelten. Wird das fehlerhafte Element auf eine neuere Version aktualisiert, so müssen die Warnhinweise
        unbedingt verschwinden (nicht gelöscht werden, nur ausgeblendet).


    @section doc_lib_sec4 Kennzeichnung von Elementen (UUID)
    
        @warning Die UUIDs werden definitiv so umgesetzt, das mit den Versionsnummern ist aber noch nicht genau definiert.

        Alle Symbole, Footprints usw. bekommen beim Erstellen eine weltweit eindeutige Kennung, eine UUID.
        Diese UUID wird dann zum Referenzieren zwischen verschiedenen Elementen verwendet. Ein Bauteil A
        verwendet z.B. das Symbol mit der UUID 12345 und den Footprint mit der UUID 55555. In welchem 
        Repository diese Elemente zur Verfügung gestellt werden, spielt keine Rolle. So lassen sich problemlos 
        Symbole aus einem Repository mit Footprints aus einem anderen Repository kombinieren.

        Neben der UUID hat jedes Element auch eine Versionsbezeichnung. Anhand dieser Nummer ermittelt der Update-
        Mechanismus, ob der Benutzer die aktuellste Version hat, oder ob das Element aktualisiert werden muss.
        Die Versionsbezeichnung ist ein String der Form "2.1.5" mit mindestens einer, bis unendlich vielen Zahlen.
        Der Ersteller eines Elementes vergibt jeweils nur eine Zahl, z.B. Version "1", "2" oder "100".
        Ein Fork davon hängt dann eine zusätzliche Nummer an, getrennt mit einem Punkt: "1.1", "2.1" oder "100.1".
        Aktualisiert der Forker seine Version, darf er nur "seine" Nummer verändern: "1.2", "2.2" oder "100.2".
        Jeder weitere Fork hängt dann eine Nummer mehr an. Der Update-Mechanismus bewertet dann die Versions-
        bezeichnung folgendermassen:

        (niedrigste bis höchste Priorität, also zuerst die älteste und am Schluss die neuste Version)
        1 --> 2 --> 2.1 --> 2.1.1 --> 2.1.2 --> 2.1.2.999.6.70.1 --> 2.5 --> 3 --> 3.1 usw.


    @section doc_lib_sec5 Digitale Signatur von Elementen
    
        @warning Nur eine Idee...

        Eventuell macht es Sinn, offizielle LibrePCB Elemente mit einer digitalen Signatur zu versehen.
        Damit sind diese Elemente quasi als "vertrauenswürdig" gekennzeichnet und können gut von Elementen
        von Drittanbietern unterschieden werden. Signierte Elemente sollen dann im Bibliotheksbrowser auch
        besonders hervorgehoben werden.

        Dazu würde sich eine zusätzliche Spalte "signature" für jedes Element anbieten. Bei nicht signierten
        Elementen steht hier NULL drin. Bei signierten Elementen liegt die UUID mit angehängter Versionsnummer
        in verschlüsselter Form in diesem Feld. Die Verschlüsselung wird mit einem privaten Schlüssel (den nur
        U.B. besitzt!) durchgeführt, und mit dem öffentlichen Schlüssel, der in LibrePCB einkompiliert ist,
        wieder entschlüsselt.


    @section doc_lib_sec6 Kategorisierung von Elementen
    
        @warning Eine Kategorisierung von Elementen wird definitiv umgesetzt. Wie dies genau gemacht wird, ist aber noch nicht definiert.

        Alle Elemente werden in Kategorien eingeteilt. Dabei gibt es zwei verschiedene Sortimente von Kategorien.
        Ein Sortiment wird für die Symbole und Komponenten verwendet (z.B. Widerstände, Kondensatoren, ...).
        Das andere Sortiment wird für die Footprints, 3D-Modelle und Gehäuse verwendet (z.B. DIP, TQFP, ...).

        Eventuell würde aber auch ein Sortiment genügen?!

        Wie die Elemente, bekommen auch die Kategorien jeweils eine UUID. mit der sie identifiziert werden können.
        In Repositories können auch neue Kategorien vorhanden sein, die dann ebenfalls in der Datenbank des
        Benutzers installiert werden.
        
        Jedes Element soll unbeschränkt vielen Kategorien zugeordnet werden können!


    @section doc_lib_sec7 Lokalisierung (Sprachen, Übersetzungen)
    
        @warning Es wird definitiv eine Lokalisierung von Bibliotheks-Elementen geben! Noch nicht ganz klar ist, in welchem Umfang dies verfolgt werden soll. Siehe bereits vorhandene XML Dateien...

        Für alle Elemente und Kategorien müssen englische Namen und Beschreibungen verfügbar sein. Zusätzlich
        können (optional) weitere Sprachen (am besten unbeschränkt viele, also dynamisch) definiert werden können.
        Beim Aktualisieren von Elementen aus dem Repository sollen auch die Namen und Beschreibungen jeweils
        aktualisiert werden. So kann man die Unterstützung für verschiedene Sprachen nach und nach ausbauen und
        über Updates den Benutzern zur Verfügung stellen.

        Für jede Sprache soll eine eigene Tabellenspalte existieren, die dynamisch erstellt werden kann.
        Von Anfang an werden die Spalten für die Sprachen Englisch, Deutsch und Französisch angeboten.
        Die Englische Bezeichnung muss für jedes Element zwingend vorhanden sein, die Übersetzungen in alle anderen
        Sprachen sind optional. Für nicht vorhandene Übersetzungen wird NULL in die Datenbank geschrieben, damit
        automatisch die englische Bezeichnung verwendet wird, auch wenn man das Programm z.B. auf Deutsch benutzt.

        Bei Kategorien wird genau das gleiche Verfahren angewendet.

        Optional kann man in den Programmeinstellungen später mal die Reihenfolge der Sprachen wählen.
        Also z.B. 1. Priorität Deutsch, 2. Priorität Französisch und 3. Priorität Englisch. Ist die deutsche
        Bezeichnung eines Elementes vorhanden, wird diese angezeigt. Falls nicht, wird die französische Bezeichnung
        angezeigt, und wenn diese auch fehlt wird die englische Bezeichnung verwendet.


    @section doc_lib_sec8 Import / Export von Elementen
    
        @warning Nur eine Idee...

        Für den einfachen (Bibliotheks-)Datenaustausch ohne Repositories wird es eine Import/Export-Funktion geben.
        Diese erlaubt es, Elemente aus der eigenen Bibliothek zu exportieren, damit man sie in einer anderen
        Bibliothek wieder Importieren kann. Beim Export werden alle relevanten Daten (auch Beschreibungen in allen
        verfügbaren Sprachen) in XML-Dateien geschrieben, für jedes Element gibt es eine eigene XML-Datei.
        Die XML-Dateien werden dann in einem Archiv (z.B. tar.gz) zusammengefasst, auch wenn nur ein einziges Element
        exportiert wird. Beim Import wird dann das Archiv extrahiert und alle darin befindlichen Elemente zur
        Bibliothek hinzugefügt.

*/
